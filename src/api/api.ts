/* tslint:disable */
/* eslint-disable */
/**
 * Chargeports api
 * Api of Chargeports
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Charger
 */
export interface Charger {
    /**
     * 
     * @type {string}
     * @memberof Charger
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Charger
     */
    latitude?: string;
    /**
     * 
     * @type {string}
     * @memberof Charger
     */
    longitude?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Charger
     */
    isAvailable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Charger
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof Charger
     */
    addressLine?: string;
    /**
     * 
     * @type {string}
     * @memberof Charger
     */
    town?: string;
    /**
     * 
     * @type {string}
     * @memberof Charger
     */
    stateOrProvince?: string;
    /**
     * 
     * @type {string}
     * @memberof Charger
     */
    postcode?: string;
    /**
     * 
     * @type {Array<ChargerConnection>}
     * @memberof Charger
     */
    chargerConnections?: Array<ChargerConnection>;
    /**
     * 
     * @type {string}
     * @memberof Charger
     */
    distance?: string;
}
/**
 * 
 * @export
 * @interface ChargerConnection
 */
export interface ChargerConnection {
    /**
     * 
     * @type {number}
     * @memberof ChargerConnection
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargerConnection
     */
    connectionTypeId?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargerConnection
     */
    statusTypeId?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargerConnection
     */
    levelId?: number;
    /**
     * 
     * @type {string}
     * @memberof ChargerConnection
     */
    powerKw?: string;
    /**
     * 
     * @type {number}
     * @memberof ChargerConnection
     */
    currentTypeId?: number;
    /**
     * 
     * @type {number}
     * @memberof ChargerConnection
     */
    quantity?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    token?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse400
 */
export interface InlineResponse400 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse400
     */
    message?: string;
}
/**
 * 
 * @export
 * @interface LoginType
 */
export interface LoginType {
    /**
     * 
     * @type {string}
     * @memberof LoginType
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginType
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface RegisterType
 */
export interface RegisterType {
    /**
     * 
     * @type {string}
     * @memberof RegisterType
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterType
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterType
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterType
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface Reservation
 */
export interface Reservation {
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    startTime?: string;
    /**
     * 
     * @type {string}
     * @memberof Reservation
     */
    endTime?: string;
    /**
     * 
     * @type {ChargerConnection}
     * @memberof Reservation
     */
    chargerConnection?: ChargerConnection;
}
/**
 * 
 * @export
 * @interface ReservationType
 */
export interface ReservationType {
    /**
     * 
     * @type {string}
     * @memberof ReservationType
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationType
     */
    endTime: string;
    /**
     * 
     * @type {string}
     * @memberof ReservationType
     */
    chargerConnection: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastName?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginType} [loginType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationLogin: async (loginType?: LoginType, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginType !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginType !== undefined ? loginType : {}) : (loginType || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterType} [registerType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRegister: async (registerType?: RegisterType, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof registerType !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registerType !== undefined ? registerType : {}) : (registerType || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargersAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/charger`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [lat] Lat of the user
         * @param {string} [_long] Long of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargersSearch: async (lat?: string, _long?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/charger/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }

            if (_long !== undefined) {
                localVarQueryParameter['long'] = _long;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previousReservations: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservation/previous`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ReservationType} [reservationType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationCreate: async (reservationType?: ReservationType, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservation`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof reservationType !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(reservationType !== undefined ? reservationType : {}) : (reservationType || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upcomingReservations: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reservation/upcoming`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-api-key")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-api-key"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LoginType} [loginType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationLogin(loginType?: LoginType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).authenticationLogin(loginType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).authenticationMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RegisterType} [registerType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authenticationRegister(registerType?: RegisterType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).authenticationRegister(registerType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chargersAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Charger>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).chargersAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [lat] Lat of the user
         * @param {string} [_long] Long of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async chargersSearch(lat?: string, _long?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Charger>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).chargersSearch(lat, _long, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async previousReservations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Reservation>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).previousReservations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ReservationType} [reservationType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservationCreate(reservationType?: ReservationType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reservation>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).reservationCreate(reservationType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upcomingReservations(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Reservation>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).upcomingReservations(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {LoginType} [loginType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationLogin(loginType?: LoginType, options?: any): AxiosPromise<InlineResponse200> {
            return DefaultApiFp(configuration).authenticationLogin(loginType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationMe(options?: any): AxiosPromise<User> {
            return DefaultApiFp(configuration).authenticationMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterType} [registerType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authenticationRegister(registerType?: RegisterType, options?: any): AxiosPromise<InlineResponse200> {
            return DefaultApiFp(configuration).authenticationRegister(registerType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargersAll(options?: any): AxiosPromise<Array<Charger>> {
            return DefaultApiFp(configuration).chargersAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [lat] Lat of the user
         * @param {string} [_long] Long of user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        chargersSearch(lat?: string, _long?: string, options?: any): AxiosPromise<Array<Charger>> {
            return DefaultApiFp(configuration).chargersSearch(lat, _long, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        previousReservations(options?: any): AxiosPromise<Array<Reservation>> {
            return DefaultApiFp(configuration).previousReservations(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ReservationType} [reservationType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservationCreate(reservationType?: ReservationType, options?: any): AxiosPromise<Reservation> {
            return DefaultApiFp(configuration).reservationCreate(reservationType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upcomingReservations(options?: any): AxiosPromise<Array<Reservation>> {
            return DefaultApiFp(configuration).upcomingReservations(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {LoginType} [loginType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authenticationLogin(loginType?: LoginType, options?: any) {
        return DefaultApiFp(this.configuration).authenticationLogin(loginType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authenticationMe(options?: any) {
        return DefaultApiFp(this.configuration).authenticationMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterType} [registerType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public authenticationRegister(registerType?: RegisterType, options?: any) {
        return DefaultApiFp(this.configuration).authenticationRegister(registerType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public chargersAll(options?: any) {
        return DefaultApiFp(this.configuration).chargersAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [lat] Lat of the user
     * @param {string} [_long] Long of user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public chargersSearch(lat?: string, _long?: string, options?: any) {
        return DefaultApiFp(this.configuration).chargersSearch(lat, _long, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public previousReservations(options?: any) {
        return DefaultApiFp(this.configuration).previousReservations(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ReservationType} [reservationType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public reservationCreate(reservationType?: ReservationType, options?: any) {
        return DefaultApiFp(this.configuration).reservationCreate(reservationType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public upcomingReservations(options?: any) {
        return DefaultApiFp(this.configuration).upcomingReservations(options).then((request) => request(this.axios, this.basePath));
    }
}


